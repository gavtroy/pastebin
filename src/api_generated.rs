// automatically generated by the FlatBuffers compiler, do not modify


// @generated

extern crate flatbuffers;

#[allow(unused_imports, dead_code)]
pub mod api {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

pub enum EntryOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Entry<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Entry<'a> {
  type Inner = Entry<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Entry<'a> {
  pub const VT_CREATE_TIMESTAMP: flatbuffers::VOffsetT = 4;
  pub const VT_EXPIRY_TIMESTAMP: flatbuffers::VOffsetT = 6;
  pub const VT_DATA: flatbuffers::VOffsetT = 8;
  pub const VT_LANG: flatbuffers::VOffsetT = 10;
  pub const VT_BURN: flatbuffers::VOffsetT = 12;
  pub const VT_ENCRYPTED: flatbuffers::VOffsetT = 14;
  pub const VT_OWNER_HMAC: flatbuffers::VOffsetT = 16;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Entry { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args EntryArgs<'args>
  ) -> flatbuffers::WIPOffset<Entry<'bldr>> {
    let mut builder = EntryBuilder::new(_fbb);
    builder.add_expiry_timestamp(args.expiry_timestamp);
    builder.add_create_timestamp(args.create_timestamp);
    if let Some(x) = args.owner_hmac { builder.add_owner_hmac(x); }
    if let Some(x) = args.lang { builder.add_lang(x); }
    if let Some(x) = args.data { builder.add_data(x); }
    builder.add_encrypted(args.encrypted);
    builder.add_burn(args.burn);
    builder.finish()
  }


  #[inline]
  pub fn create_timestamp(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(Entry::VT_CREATE_TIMESTAMP, Some(0)).unwrap()}
  }
  #[inline]
  pub fn expiry_timestamp(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(Entry::VT_EXPIRY_TIMESTAMP, Some(0)).unwrap()}
  }
  #[inline]
  pub fn data(&self) -> Option<flatbuffers::Vector<'a, u8>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(Entry::VT_DATA, None)}
  }
  #[inline]
  pub fn lang(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Entry::VT_LANG, None)}
  }
  #[inline]
  pub fn burn(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(Entry::VT_BURN, Some(false)).unwrap()}
  }
  #[inline]
  pub fn encrypted(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(Entry::VT_ENCRYPTED, Some(false)).unwrap()}
  }
  #[inline]
  pub fn owner_hmac(&self) -> Option<flatbuffers::Vector<'a, u8>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(Entry::VT_OWNER_HMAC, None)}
  }
}

impl flatbuffers::Verifiable for Entry<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u64>("create_timestamp", Self::VT_CREATE_TIMESTAMP, false)?
     .visit_field::<u64>("expiry_timestamp", Self::VT_EXPIRY_TIMESTAMP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("data", Self::VT_DATA, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("lang", Self::VT_LANG, false)?
     .visit_field::<bool>("burn", Self::VT_BURN, false)?
     .visit_field::<bool>("encrypted", Self::VT_ENCRYPTED, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("owner_hmac", Self::VT_OWNER_HMAC, false)?
     .finish();
    Ok(())
  }
}
pub struct EntryArgs<'a> {
    pub create_timestamp: u64,
    pub expiry_timestamp: u64,
    pub data: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub lang: Option<flatbuffers::WIPOffset<&'a str>>,
    pub burn: bool,
    pub encrypted: bool,
    pub owner_hmac: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
}
impl<'a> Default for EntryArgs<'a> {
  #[inline]
  fn default() -> Self {
    EntryArgs {
      create_timestamp: 0,
      expiry_timestamp: 0,
      data: None,
      lang: None,
      burn: false,
      encrypted: false,
      owner_hmac: None,
    }
  }
}

pub struct EntryBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> EntryBuilder<'a, 'b> {
  #[inline]
  pub fn add_create_timestamp(&mut self, create_timestamp: u64) {
    self.fbb_.push_slot::<u64>(Entry::VT_CREATE_TIMESTAMP, create_timestamp, 0);
  }
  #[inline]
  pub fn add_expiry_timestamp(&mut self, expiry_timestamp: u64) {
    self.fbb_.push_slot::<u64>(Entry::VT_EXPIRY_TIMESTAMP, expiry_timestamp, 0);
  }
  #[inline]
  pub fn add_data(&mut self, data: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Entry::VT_DATA, data);
  }
  #[inline]
  pub fn add_lang(&mut self, lang: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Entry::VT_LANG, lang);
  }
  #[inline]
  pub fn add_burn(&mut self, burn: bool) {
    self.fbb_.push_slot::<bool>(Entry::VT_BURN, burn, false);
  }
  #[inline]
  pub fn add_encrypted(&mut self, encrypted: bool) {
    self.fbb_.push_slot::<bool>(Entry::VT_ENCRYPTED, encrypted, false);
  }
  #[inline]
  pub fn add_owner_hmac(&mut self, owner_hmac: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Entry::VT_OWNER_HMAC, owner_hmac);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> EntryBuilder<'a, 'b> {
    let start = _fbb.start_table();
    EntryBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Entry<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Entry<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Entry");
      ds.field("create_timestamp", &self.create_timestamp());
      ds.field("expiry_timestamp", &self.expiry_timestamp());
      ds.field("data", &self.data());
      ds.field("lang", &self.lang());
      ds.field("burn", &self.burn());
      ds.field("encrypted", &self.encrypted());
      ds.field("owner_hmac", &self.owner_hmac());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `Entry`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_entry_unchecked`.
pub fn root_as_entry(buf: &[u8]) -> Result<Entry, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<Entry>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `Entry` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_entry_unchecked`.
pub fn size_prefixed_root_as_entry(buf: &[u8]) -> Result<Entry, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<Entry>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `Entry` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_entry_unchecked`.
pub fn root_as_entry_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Entry<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<Entry<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `Entry` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_entry_unchecked`.
pub fn size_prefixed_root_as_entry_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Entry<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<Entry<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a Entry and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `Entry`.
pub unsafe fn root_as_entry_unchecked(buf: &[u8]) -> Entry {
  flatbuffers::root_unchecked::<Entry>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed Entry and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `Entry`.
pub unsafe fn size_prefixed_root_as_entry_unchecked(buf: &[u8]) -> Entry {
  flatbuffers::size_prefixed_root_unchecked::<Entry>(buf)
}
#[inline]
pub fn finish_entry_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<Entry<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_entry_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<Entry<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod api

